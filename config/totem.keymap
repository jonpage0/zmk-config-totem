//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2

/ {
    combos {
        compatible = "zmk,combos";

        win1 {
            bindings = <&kp LS(LA(LC(R)))>;
            key-positions = <13 3>;
            layers = <1>;
        };

        win2 {
            bindings = <&kp LS(LA(LC(E)))>;
            key-positions = <12 2>;
            layers = <1>;
        };

        win3 {
            bindings = <&kp LS(LA(LC(Q)))>;
            key-positions = <11 1>;
            layers = <1>;
        };

        win4 {
            bindings = <&kp LA(LC(LS(V)))>;
            key-positions = <13 24>;
            layers = <1>;
        };

        win5 {
            bindings = <&kp LS(LA(LC(C)))>;
            key-positions = <12 23>;
            layers = <1>;
        };

        win6 {
            bindings = <&kp LS(LA(LC(X)))>;
            key-positions = <22 11>;
            layers = <1>;
        };

        left_space {
            bindings = <&kp SPACE>;
            key-positions = <11 12>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <12 13>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 11>;
            timeout-ms = <65>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            timeout-ms = <65>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            timeout-ms = <65>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <22 23>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <24 23>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <12 23>;
            timeout-ms = <65>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <8 7>;
        };

        left-paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        right_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <17 18>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <28 29>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <17 28>;
            timeout-ms = <65>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <7 17>;
            timeout-ms = <65>;
        };

        shift-return {
            bindings = <&kp LS(ENTER)>;
            key-positions = <16 27>;
            timeout-ms = <75>;
        };

        exclimation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <0 10>;
        };
    };

    behaviors {
        hr: hr {
            compatible = "zmk,behavior-hold-tap";
            label = "HR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
            require-prior-idle-ms = <130>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "base";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
            &kp Q               &kp W           &kp E                    &kp R             &kp T        &kp Y        &kp U              &kp I               &kp O            &kp P
            &hr LEFT_CONTROL A  &hr LEFT_ALT S  &hr LEFT_COMMAND D       &hr LEFT_SHIFT F  &kp G        &kp H        &hr RIGHT_SHIFT J  &hr LEFT_COMMAND K  &hr RIGHT_ALT L  &hr RIGHT_CONTROL APOS
&kp ESCAPE  &kp Z               &kp X           &kp C                    &kp V             &kp B        &kp N        &kp M              &kp COMMA           &kp DOT          &kp FSLH                &kp SEMI
                                                &lt 2 LS(LA(LC(LG(H))))  &lt 1 BACKSPACE   &lt 4 TAB    &lt 2 ENTER  &lt 3 SPACE        &lt 1 TAB
            >;
        };

        navm {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "navm";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     !     ┃     @     ┃     #     ┃     $     ┃     %     ┃   ┃     ˆ     ┃     &     ┃     Ü     ┃     '     ┃     "     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     Ä     ┃           ┃    SZ     ┃           ┃           ┃   ┃   MUTE    ┃   YEN     ┃   EURO    ┃  POUND    ┃     Ö     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃  EMAIL1   ┃  EMAIL2   ┃           ┃           ┃           ┃   ┃   VOL-    ┃   VOL+    ┃   LAST    ┃   NEXT    ┃     \     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    GIF    ┃    ADJ    ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
                            &kp LS(LG(LA(LC(Q))))   &kp LC(LA(LS(LG(W))))  &kp LA(LS(LC(LG(E))))   &kp LS(LA(LC(LG(R))))  &kp LS(LG(LA(LC(T))))    &kp LS(LA(LG(LC(Y))))  &kp LS(LA(LC(LG(U))))  &kp LS(LA(LC(LG(I))))   &kp LC(LA(LS(LG(O))))    &kp LA(LS(LC(LG(P))))
                            &hr LEFT_CONTROL LG(A)  &hr LEFT_ALT LG(X)     &hr LEFT_COMMAND LG(C)  &hr LEFT_SHIFT LG(V)   &kp LS(LG(LA(LC(G))))    &kp LEFT               &kp DOWN               &kp UP_ARROW            &kp RIGHT                &kp LS(LG(LA(LC(SQT))))
&kp LS(LG(LA(LC(ESCAPE))))  &kp LG(LS(LA(LC(Z))))   &kp LS(LG(Z))          &kp LG(Z)               &kp LS(LA(LC(LG(V))))  &kp LA(LS(LC(LG(B))))    &kp LS(LA(LC(LG(N))))  &kp LS(LG(J))          &kp LS(LG(LEFT_BRACE))  &kp LS(LG(RIGHT_BRACE))  &kp LS(LA(LC(LG(SLASH))))  &trans
                                                                           &trans                  &trans                 &trans                   &trans                 &trans                 &trans
            >;
        };

        num {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "num";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃           ┃           ┃     UP    ┃           ┃     {     ┃   ┃     }     ┃     7     ┃     8     ┃     9     ┃     +     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   SHIFT   ┃   LEFT    ┃    DOWN   ┃   RIGHT   ┃     [     ┃   ┃     ]     ┃     4     ┃     5     ┃     6     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃   P UP    ┃  C LOCK   ┃  P DOWN   ┃     (     ┃   ┃     )     ┃     1     ┃     2     ┃     3     ┃     *     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃    DEL    ┃     0     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
        &kp CARET                     &kp AMPERSAND         &kp ASTERISK           &kp PERCENT            &trans    &kp KP_DIVIDE    &kp N7        &kp N8        &kp N9        &kp KP_MINUS
        &hr LEFT_CONTROL EXCLAMATION  &hr LEFT_ALT AT_SIGN  &hr LEFT_COMMAND HASH  &hr LEFT_SHIFT DOLLAR  &trans    &kp KP_MULTIPLY  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_PLUS
&trans  &kp GRAVE                     &trans                &trans                 &trans                 &trans    &kp N0           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_CLEAR  &kp KP_EQUAL
                                                            &trans                 &trans                 &trans    &trans           &trans        &trans
            >;
        };

        pro {
            bindings = <
        &kp PIPE            &trans          &trans              &kp TILDE         &kp AMPERSAND    &kp PLUS        &kp LEFT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp RIGHT_BRACKET
        &hr LEFT_CONTROL A  &hr LEFT_ALT S  &hr LEFT_COMMAND D  &hr LEFT_SHIFT F  &kp PERCENT      &kp MINUS       &kp SLASH         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ASTERISK
&trans  &trans              &trans          &trans              &trans            &trans           &kp UNDERSCORE  &kp AT_SIGN       &kp LESS_THAN         &kp GREATER_THAN       &kp HASH           &kp EQUAL
                                            &trans              &trans            &trans           &trans          &trans            &trans
            >;

            label = "pro";
        };

        misc {
            bindings = <
        &kp LS(LG(NUMBER_2))  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(NUMBER_5))  &kp LG(LS(NUMBER_6))    &trans  &trans  &trans  &trans  &trans
        &kp LG(LS(LC(A)))     &kp K_MUTE            &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(LS(LC(Z)))     &kp C_PLAY_PAUSE      &kp C_PREVIOUS        &kp C_NEXT            &trans                  &trans  &trans  &trans  &trans  &trans  &trans
                                                    &trans                &trans                &trans                  &trans  &trans  &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };
};
